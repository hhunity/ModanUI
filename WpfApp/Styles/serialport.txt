####view model
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System.Threading;
using System.Threading.Tasks;

public partial class MainViewModel : ObservableObject
{
    private readonly SerialPortWorker _serialWorker;
    private readonly SemaphoreSlim _sendLock = new(1, 1);

    [ObservableProperty]
    private string serialData;

    [ObservableProperty]
    private string commandText;

    [ObservableProperty]
    private bool isSending;

    public MainViewModel()
    {
        _serialWorker = new SerialPortWorker("COM3", OnReceived);
        _serialWorker.Start();
    }

    private void OnReceived(string data)
    {
        SerialData = data;
    }
[RelayCommand]
public async Task SendCommandAsync()
{
    if (IsSending) return;

    IsSending = true;
    Progress = 0;

    await _sendLock.WaitAsync();
    try
    {
        var reporter = new Progress<int>(p => Progress = p);

        if (!string.IsNullOrWhiteSpace(CommandText))
        {
            SerialData = await _serialWorker.WriteAndReadAsync(CommandText, reporter);
        }
    }
    finally
    {
        Progress = 0;
        _sendLock.Release();
        IsSending = false;
    }
}
    [RelayCommand]
    public async Task SendCommandAsync()
    {
        if (IsSending) return;

        IsSending = true;
        await _sendLock.WaitAsync();
        try
        {
            if (!string.IsNullOrWhiteSpace(CommandText))
            {
                SerialData = await _serialWorker.WriteAndReadAsync(CommandText);
            }
        }
        finally
        {
            _sendLock.Release();
            IsSending = false;
        }
    }

    public void Dispose()
    {
        _serialWorker.Close();
    }
}

##model
using System;
using System.Diagnostics;
using System.IO.Ports;
using System.Windows;

public class SerialPortWorker
{
    private readonly SerialPort _port;
    private readonly Action<string> _onDataReceived;
    private volatile bool _isClosing = false;

    public SerialPortWorker(string portName, Action<string> onDataReceived)
    {
        _onDataReceived = onDataReceived;
        _port = new SerialPort(portName, 9600)
        {
            NewLine = "\n",
            ReadTimeout = 1000,
            WriteTimeout = 1000
        };

        _port.DataReceived += Port_DataReceived;
    }

    public void Start()
    {
        if (!_port.IsOpen)
        {
            try
            {
                _port.Open();
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Serial port open error: {ex.Message}");
            }
        }
    }

    public void Close()
    {
        _isClosing = true;

        try
        {
            if (_port.IsOpen)
            {
                _port.DataReceived -= Port_DataReceived;
                _port.Close();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Serial port close error: {ex.Message}");
        }
    }
public async Task<string> WriteAndReadAsync(string command, IProgress<int>? progress = null)
{
    return await Task.Run(() =>
    {
        try
        {
            if (_isClosing || !_port.IsOpen)
                return "[Port Closed]";

            progress?.Report(10); // 書き込み開始

            _port.WriteLine(command);
            progress?.Report(50); // 書き込み完了

            string response = _port.ReadLine();
            progress?.Report(100); // 応答完了

            return response;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Serial error: {ex.Message}");
            progress?.Report(0);
            return "[Error]";
        }
    });
}
    public async Task WriteAsync(string command)
    {
        await Task.Run(() =>
        {
            try
            {
                if (!_isClosing && _port.IsOpen && !string.IsNullOrWhiteSpace(command))
                    _port.WriteLine(command);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Serial port write error: {ex.Message}");
            }
        });
    }

    private void Port_DataReceived(object sender, SerialDataReceivedEventArgs e)
    {
        if (_isClosing || !_port.IsOpen)
            return;

        try
        {
            string data = _port.ReadLine();

            var dispatcher = Application.Current?.Dispatcher;
            if (dispatcher != null && !dispatcher.HasShutdownStarted && !dispatcher.HasShutdownFinished)
            {
                dispatcher.Invoke(() =>
                {
                    _onDataReceived?.Invoke(data);
                });
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Serial port read error: {ex.Message}");
        }
    }
}
##xaml
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp"
        mc:Ignorable="d"
        Title="Serial (Event-based)" Height="200" Width="400">
    <StackPanel Margin="20">
        <TextBox Text="{Binding CommandText, UpdateSourceTrigger=PropertyChanged}" />
        <Button Content="Send" Command="{Binding SendCommandCommand}" Margin="0,10,0,0"/>
        <TextBlock Text="{Binding SerialData}" Margin="0,10,0,0" FontSize="16"/>
    <ProgressBar Height="10" Margin="0,10,0,0"
             Minimum="0" Maximum="100"
             Value="{Binding Progress}"
             Visibility="{Binding IsSending, Converter={StaticResource BoolToVisibilityConverter}}"/>
</StackPanel>
</Window>


###view
public partial class MainWindow : Window
{
    private readonly MainViewModel _viewModel = new();

    public MainWindow()
    {
        InitializeComponent();
        DataContext = _viewModel;
    }

    protected override void OnClosed(EventArgs e)
    {
        _viewModel.Dispose();
        base.OnClosed(e);
    }
}





